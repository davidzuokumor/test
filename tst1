import sys
from collections import defaultdict


class SparseMatrix:
    def __init__(self, rows=0, cols=0):
        self.rows = rows
        self.cols = cols
        self.data = defaultdict(int)

    @classmethod
    def from_file(cls, filename):
        try:
            with open(filename, 'r') as file:
                lines = [line.strip() for line in file if line.strip()]
                rows = int(lines[0].split('=')[1])
                cols = int(lines[1].split('=')[1])
                matrix = cls(rows, cols)
                for line in lines[2:]:
                    if not (line.startswith('(') and line.endswith(')')):
                        raise ValueError("Invalid file format: entries must be in (row, col, value) format")
                    row, col, value = map(int, line[1:-1].split(','))
                    matrix.update(row, col, value)
                return matrix
        except Exception as e:
            raise ValueError(f"Failed to load matrix from {filename}: {e}")

    def update(self, row, col, value):
        if value != 0:
            self.data[(row, col)] = value
        elif (row, col) in self.data:
            del self.data[(row, col)]

    def get(self, row, col):
        return self.data.get((row, col), 0)

    def __add__(self, other):
        if self.rows != other.rows or self.cols != other.cols:
            raise ValueError("Matrices must have the same dimensions for addition")
        result = SparseMatrix(self.rows, self.cols)
        all_keys = set(self.data.keys()).union(set(other.data.keys()))
        for (row, col) in all_keys:
            result.update(row, col, self.get(row, col) + other.get(row, col))
        return result

    def __sub__(self, other):
        if self.rows != other.rows or self.cols != other.cols:
            raise ValueError("Matrices must have the same dimensions for subtraction")
        result = SparseMatrix(self.rows, self.cols)
        all_keys = set(self.data.keys()).union(set(other.data.keys()))
        for (row, col) in all_keys:
            result.update(row, col, self.get(row, col) - other.get(row, col))
        return result

    def __mul__(self, other):
        if self.cols != other.rows:
            raise ValueError(f"Cannot multiply matrices: {self.cols} columns != {other.rows} rows")
        result = SparseMatrix(self.rows, other.cols)
        for (row1, col1), val1 in self.data.items():
            for col2 in range(other.cols):
                if (col1, col2) in other.data:
                    result.update(row1, col2, result.get(row1, col2) + val1 * other.get(col1, col2))
        return result

    def save(self, filename):
        with open(filename, 'w') as file:
            file.write(f"rows={self.rows}\ncols={self.cols}\n")
            for (row, col), value in sorted(self.data.items()):
                file.write(f"({row}, {col}, {value})\n")


def main():
    # Prompt the user for the operation
    operation = input("Enter the operation (add, subtract, multiply): ").strip().lower()
    if operation not in ['add', 'subtract', 'multiply']:
        print("Invalid operation. Please choose 'add', 'subtract', or 'multiply'.")
        return

    # Prompt the user for the file paths
    file1 = input("Enter the path to the first matrix file: ").strip()
    file2 = input("Enter the path to the second matrix file: ").strip()

    # Load matrices from files
    try:
        matrix1 = SparseMatrix.from_file(file1)
        matrix2 = SparseMatrix.from_file(file2)
    except ValueError as e:
        print(f"Error: {e}")
        return

    # Display matrix dimensions and values
    print(f"Matrix 1: {matrix1.rows}x{matrix1.cols}, Values: {dict(matrix1.data)}")
    print(f"Matrix 2: {matrix2.rows}x{matrix2.cols}, Values: {dict(matrix2.data)}")

    # Perform the operation
    try:
        if operation == 'add':
            result = matrix1 + matrix2
        elif operation == 'subtract':
            result = matrix1 - matrix2
        elif operation == 'multiply':
            result = matrix1 * matrix2

        # Save the result to a file
        output_file = f"result_{operation}.txt"
        result.save(output_file)
        print(f"Result saved to {output_file}")
    except ValueError as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()
